package com.presentation.controllers;

import com.presentation.entities.User;
import com.presentation.repositories.UserRepository;
import com.presentation.util.AuthenticationRequest;
import com.presentation.util.AuthenticationResponse;
import com.presentation.util.JwtUtil;
import com.presentation.util.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Controller;
import java.util.Optional;

import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

// This means that this class is a Controller
@Controller
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtUtil jwtTokenUtil;

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    @PostMapping(path = "/addUser") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(
            @Valid @RequestParam String firstName,
            @Valid @RequestParam String lastName,
            @Valid @RequestParam String email,
            @Valid @RequestParam String study,
            @Valid @RequestParam String year
    ) {
        User user = new User();
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);
        user.setStudy(study);
        user.setYear(year);
        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path = "/allUsers")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

	@GetMapping(path = "/userByID")
	public @ResponseBody Optional<User> getUserById(@RequestParam int id){
		Optional<User> maybeUser = userRepository.findById(id);
		if (!maybeUser.isPresent()){
			System.err.println("No user with this id exists in the database");
		}
		return maybeUser;
	}


    @RequestMapping(value = "/api/authenticate", method = RequestMethod.POST)
    public ResponseEntity<?> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest) throws Exception {
        try {
            Optional<User> fetchedUser = userRepository.findById(authenticationRequest.getId());

            if (!fetchedUser.isPresent()) throw new BadCredentialsException("Does not exist");

            User user = fetchedUser.get();

            String hashed_pw = BCrypt.hashpw(authenticationRequest.getPassword(), user.getSalt());

            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(authenticationRequest.getId(), hashed_pw)
            );
        }catch(BadCredentialsException e ) {
            throw new Exception("Incorrect username or password" , e);
        }

        //todo - lite optimalt å parse til en string for å bruke denne metoden. Finn en annen løsning
        final UserDetails userDetails = userService.loadUserByUsername(Integer.toString(authenticationRequest.getId()));
        final String jwt = jwtTokenUtil.generateToken(userDetails);
        return ResponseEntity.ok(new AuthenticationResponse(jwt));
    }
}
